//
//  SignUpPhoneViewController.swift
//  MySampleApp
//
//
// Copyright 2017 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to
// copy, distribute and modify it.
//
// Source code generated from template: aws-my-sample-app-ios-swift v0.10
//
//

import Foundation
import UIKit
import AWSMobileHubHelper
import AWSCognitoIdentityProvider

class SignUpPhoneViewController: UIViewController {
    
    @IBOutlet weak var phoneTextField: UITextField! // textField where user enters their phone number
    
    var pool: AWSCognitoIdentityUserPool?
    var sentTo: String?
    var newUser: NewUser! // Holds user's username, password, & email values
    
    override func viewDidLoad() {
        super.viewDidLoad()
        self.pool = AWSCognitoIdentityUserPool.init(forKey: AWSCognitoUserPoolsSignInProviderKey)
    }
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let signUpConfirmationViewController = segue.destination as? UserPoolSignUpConfirmationViewController {
            signUpConfirmationViewController.sentTo = self.sentTo
            signUpConfirmationViewController.user = self.pool?.getUser(self.newUser.username)
            signUpConfirmationViewController.newUser = self.newUser
        }
    }
    
    @IBAction func onSendSMS(_ sender: Any) {
        var attributes = [AWSCognitoIdentityUserAttributeType]() // array list of User Attribute Type's
        
        // {
        // adding phone number and email attributes to the user
        if let phoneValue = self.phoneTextField.text, !phoneValue.isEmpty {
            let phone = AWSCognitoIdentityUserAttributeType()
            phone?.name = "phone_number"
            phone?.value = phoneValue
            attributes.append(phone!)
        }
        
        let email = AWSCognitoIdentityUserAttributeType()
        email?.name = "email"
        email?.value = newUser.email
        attributes.append(email!)
        // }
        
        //sign up the user
        self.pool?.signUp(newUser.username, password: newUser.password, userAttributes: attributes, validationData: nil).continueWith {[weak self] (task: AWSTask<AWSCognitoIdentityUserPoolSignUpResponse>) -> AnyObject? in
            guard let strongSelf = self else { return nil }
            
            if let error = task.error as? NSError {
                
                switch (error.code) {
                case awsErrorType.invalidEmailAddress:
                    // email entered in the previous view controller is invalid
                    let invalidEmailAction = UIAlertAction(title: "Ok", style: .cancel, handler: { (action: UIAlertAction) in
                        strongSelf.dismiss(animated: true)
                    })
                    strongSelf.supremeShowError(title: "Oops", message: "Email is invalid", action: invalidEmailAction)
                    
                case awsErrorType.userAlreadyExists:
                    // user already exists but is unconfirmed
                    _ = lambdaFunction(function: .deleteUser(username: strongSelf.newUser.username))
                    strongSelf.onSendSMS(sender)
                    
                default: 
                    strongSelf.supremeShowError(title: String(describing: error.userInfo["__type"]!), message: String(describing: error.userInfo["message"]!), action: nil)
                }
            }
            
            // if the sign up is successful
            if let result = task.result as AWSCognitoIdentityUserPoolSignUpResponse! {
                // handle the case where user has to confirm his identity via email / SMS
                if (result.user.confirmedStatus != AWSCognitoIdentityUserStatus.confirmed) { // checks if the current user's confirmed status is unconfirmed
                    strongSelf.sentTo = result.codeDeliveryDetails?.destination // sets the sentTo variable to the codeDeliveryDetails destination
                    strongSelf.supremePerformSegue(withIdentifier: "SignUpConfirmSegue", sender: sender) // segue the user onto the UserPoolSignUpConfirmationViewController
                } else {
                    // if the user is already confirmed then tell them the registration is complete, and that it was successful
                    strongSelf.supremeShowError(title: "Registration Complete", message: "Registration was successful.", action: nil)
                    DispatchQueue.main.async {
                        _ = strongSelf.navigationController?.popToRootViewController(animated: true)
                    }
                }
            }
            return nil
        }
        
    }
    
}
