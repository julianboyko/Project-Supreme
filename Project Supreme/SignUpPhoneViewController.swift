//
//  SignUpPhoneViewController.swift
//  MySampleApp
//
//
// Copyright 2017 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to
// copy, distribute and modify it.
//
// Source code generated from template: aws-my-sample-app-ios-swift v0.10
//
//

import Foundation
import UIKit
import AWSMobileHubHelper
import AWSCognitoIdentityProvider

class SignUpPhoneViewController: UIViewController {
    
    @IBOutlet weak var phoneTextField: UITextField!
    
    var newUserInfo: (username: String?, password: String?, email: String?)
    var pool: AWSCognitoIdentityUserPool?
    var sentTo: String?

    override func viewDidLoad() {
        super.viewDidLoad()
        self.pool = AWSCognitoIdentityUserPool.init(forKey: AWSCognitoUserPoolsSignInProviderKey)
    }
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let signUpConfirmationViewController = segue.destination as? UserPoolSignUpConfirmationViewController {
            signUpConfirmationViewController.sentTo = self.sentTo
            signUpConfirmationViewController.user = self.pool?.getUser(self.newUserInfo.username!)
            signUpConfirmationViewController.newUserInfo = self.newUserInfo
        }
    }

    @IBAction func onSendSMS(_ sender: Any) {
        var attributes = [AWSCognitoIdentityUserAttributeType]() // array list of User Attribute Type's
        
        let ac = UIAlertController(title: nil, message: nil, preferredStyle: .alert)
        ac.addAction(UIAlertAction(title: "Ok", style: .cancel))
        
        if let phoneValue = self.phoneTextField.text, !phoneValue.isEmpty { // adding the phone_number attribute to the user's phone number user attribute
            let phone = AWSCognitoIdentityUserAttributeType()
            phone?.name = "phone_number"
            phone?.value = phoneValue
            attributes.append(phone!)
        }
        
        if let emailValue = self.newUserInfo.email, !emailValue.isEmpty { // adding the email attribute to the user's email user attribute
            let email = AWSCognitoIdentityUserAttributeType()
            email?.name = "email"
            email?.value = emailValue
            attributes.append(email!)
        }
        
        //sign up the user
        self.pool?.signUp(newUserInfo.username!, password: newUserInfo.password!, userAttributes: attributes, validationData: nil).continueWith {[weak self] (task: AWSTask<AWSCognitoIdentityUserPoolSignUpResponse>) -> AnyObject? in
            guard let strongSelf = self else { return nil }
            DispatchQueue.main.async(execute: {
                if let error = task.error as? NSError {
                    
                    let errorMessage = error.userInfo["message"] as! String
                    switch (errorMessage) {
                    case "Invalid email address format.":
                        let invalidEmail = UIAlertController(title: "Oops", message: "Email is invalid", preferredStyle: .alert)
                        let invalidEmailAction = UIAlertAction(title: "Ok", style: .cancel, handler: { (action: UIAlertAction) in
                            strongSelf.dismiss(animated: true)
                        })
                        invalidEmail.addAction(invalidEmailAction)
                        strongSelf.present(invalidEmail, animated: true)
                    case "User already exists":
                        
                        let httpMethodName = "GET"
                        let URLString = "/deleteuser"
                        let queryStringParameters = ["username":"\(strongSelf.newUserInfo.username!)"]
                        let headerParameters = [
                            "Content-Type": "application/json",
                            "Accept": "application/json"
                        ]
                        
                        let apiRequest = AWSAPIGatewayRequest(httpMethod: httpMethodName,
                                                              urlString: URLString,
                                                              queryParameters: queryStringParameters,
                                                              headerParameters: headerParameters,
                                                              httpBody: nil)
                        
                        let invocationClient = AWSAPI_2FAM04WBZ9_LambdaGateClient(forKey: AWSCloudLogicDefaultConfigurationKey)
                        
                        invocationClient.invoke(apiRequest).continueWith { (task: AWSTask<AWSAPIGatewayResponse>) -> Any? in
                            
                            if let error = task.error {
                                print ("Error occurred: \(error)")
                                return nil
                            }
                            
                            strongSelf.onSendSMS(sender)
                            return nil
                        }
                        
                    default:
                        ac.title = error.userInfo["__type"] as? String
                        ac.message = error.userInfo["message"] as? String
                        strongSelf.present(ac, animated: true)
                    }
                    
                    return
                }
                
                // if the sign up is successful
                if let result = task.result as AWSCognitoIdentityUserPoolSignUpResponse! {
                    // handle the case where user has to confirm his identity via email / SMS
                    if (result.user.confirmedStatus != AWSCognitoIdentityUserStatus.confirmed) { // checks if the current user's confirmed status is unconfirmed
                        strongSelf.sentTo = result.codeDeliveryDetails?.destination // sets the sentTo variable to the codeDeliveryDetails destination
                        strongSelf.performSegue(withIdentifier: "SignUpConfirmSegue", sender:sender) // segue the user onto the UserPoolSignUpConfirmationViewController
                    } else {
                        // if the user is already confirmed then tell them the registration is complete, and that it was successful
                        ac.title = "Registration Complete"
                        ac.message = "Registration was successful."
                        strongSelf.present(ac, animated: true)
                        _ = strongSelf.navigationController?.popToRootViewController(animated: true)
                    }
                }
                
            })
            return nil
        }

    }
    
}
