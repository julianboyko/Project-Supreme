//
//  UserPoolSignUpConfirmationViewController.swift
//  MySampleApp
//
//
// Copyright 2017 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to
// copy, distribute and modify it.
//
// Source code generated from template: aws-my-sample-app-ios-swift v0.10
//
//

import Foundation
import UIKit
import AWSCognitoIdentityProvider
import AWSMobileHubHelper

class UserPoolSignUpConfirmationViewController : UIViewController {
    
    var newUser: NewUser! // Holds user's username, password, & email values
    var sentTo: String? // variable that holds the code details destination that was passed from the UserPoolSignUpViewController
    var user: AWSCognitoIdentityUser?
    
    @IBOutlet weak var codeSentTo: UILabel! // uiLabel that displays part of the phone number that the verification code was sent to
    @IBOutlet weak var confirmationCode: UITextField! // textField that is used to enter the verification code that was sent to the new user's phone number
    
    override func viewDidLoad() {
        super.viewDidLoad()
        self.codeSentTo.text = sentTo // sets the text of the codeSentTo uilabel to the sentTo variable
    }
    
    @IBAction func onConfirm(_ sender: AnyObject) {
        guard let confirmationCodeValue = self.confirmationCode.text, !confirmationCodeValue.isEmpty else {
            self.supremeShowError(title: "Confirmation code missing.", message: "Please enter a valid confirmation code.", action: nil)
            return
        }
        self.user?.confirmSignUp(self.confirmationCode.text!, forceAliasCreation: true).continueWith(block: {[weak self] (task: AWSTask) -> AnyObject? in
            // attempts to complete the signing up process of the user by confirming their account with the verification code that they entered in the confirmationCode textField
            guard let strongSelf = self else { return nil }
            if let error = task.error as? NSError {
                // if there is an error while attempting to confirm the user, send the error back to the user
                strongSelf.supremeShowError(title: String(describing: error.userInfo["__type"]!), message: String(describing: error.userInfo["message"]!), action: nil)
            } else {
                // if there are no errors, and everything worked successfully. complete the registration by sending a success message back to the user
                strongSelf.supremeShowError(title: "Registration Complete", message: "Registration was successful.", action: nil)
                DispatchQueue.main.async {
                    _ = strongSelf.navigationController?.popToRootViewController(animated: true)
                }
            }
            return nil
        })
    }
    
    @IBAction func onSendConfirmationCode(_ sender: AnyObject) {
        // this function is ran when the user clicks on resend confirmation code uibutton or when a unconfirmed user attempts to sign in
        self.user?.resendConfirmationCode().continueWith(block: {[weak self] (task: AWSTask<AWSCognitoIdentityUserResendConfirmationCodeResponse>) -> AnyObject? in
            // attempting to resend the confirmation code to the phone number the user has entered in the previous screen (UserPoolSignUpViewController)
            
            guard let strongSelf = self else { return nil }
            if let error = task.error as? NSError {
                strongSelf.supremeShowError(title: String(describing: error.userInfo["__type"]!), message: String(describing: error.userInfo["message"]!), action: nil)
            } else if let result = task.result as AWSCognitoIdentityUserResendConfirmationCodeResponse! {
                if sender is SignInViewController {
                    // if this function was called from the SignInViewController
                    strongSelf.codeSentTo.text = "\(result.codeDeliveryDetails!.destination!)"
                } else {
                    strongSelf.supremeShowError(title: "Code Resent", message: "Code resent to \(result.codeDeliveryDetails?.destination!)", action: nil)
                }
            }
            return nil
        })
    }
    
    @IBAction func onCancel(_ sender: AnyObject) {
        dismiss(animated: true, completion: nil)
    }
}
